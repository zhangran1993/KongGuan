////  SimpleDemoViewController.m//  SimpleDemo////  Created by apple on 11-4-2.//  Copyright __MyCompanyName__ 2011. All rights reserved.//#import "SimpleDemoViewController.h"#import "hcnetsdk.h"#import "HikDec.h"#import "Preview.h"#import "EzvizTrans.h"#import "FrameBaseRequest.h"@implementation SimpleDemoViewController@synthesize m_playView;@synthesize m_lUserID;@synthesize m_lRealPlayID;@synthesize m_lPlaybackID;@synthesize m_bPreview;SimpleDemoViewController *g_pController = NULL;int g_iStartChan = 0;int g_iPreviewChanNum = 0;void g_fExceptionCallBack(DWORD dwType, LONG lUserID, LONG lHandle, void *pUser){    NSLog(@"g_fExceptionCallBack Type[0x%x], UserID[%d], Handle[%d]", dwType, lUserID, lHandle);}-(void)playNow{    NSLog(@"loginBtnClicked");        BOOL bRet = NET_DVR_Init();    if (!bRet){        NSLog(@"NET_DVR_Init failed");    }        NSString *documentPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];    const char* pDir = [documentPath UTF8String];    NET_DVR_SetLogToFile(3, (char*)pDir, true);    g_iStartChan = 32 + _channelId;    if([self loginNormalDevice]){        m_lRealPlayID = startPreview(m_lUserID, g_iStartChan, m_playView, 0);        if(m_lRealPlayID >= 0)        {            m_bPreview = true;        }    }}- (bool) loginNormalDevice{    //  Get value    NSString * iP = _ip;//@"192.168.0.178";    NSString * port = _port;//@"8000";    NSString * usrName =  _name;//@"admin";    NSString * password = _password;//@"kg123456";        DeviceInfo *deviceInfo = [[DeviceInfo alloc] init];    deviceInfo.chDeviceAddr = iP;    deviceInfo.nDevicePort = (int)[port intValue];    deviceInfo.chLoginName = usrName;    deviceInfo.chPassWord = password;        // device login    NET_DVR_DEVICEINFO_V30 logindeviceInfo = {0};        // encode type    NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);    m_lUserID = NET_DVR_Login_V30((char*)[deviceInfo.chDeviceAddr UTF8String],                                  deviceInfo.nDevicePort,                                  (char*)[deviceInfo.chLoginName cStringUsingEncoding:enc],                                  (char*)[deviceInfo.chPassWord UTF8String],                                  &logindeviceInfo);        printf("iP:%s\n", (char*)[deviceInfo.chDeviceAddr UTF8String]);    printf("Port:%d\n", deviceInfo.nDevicePort);    printf("UsrName:%s\n", (char*)[deviceInfo.chLoginName cStringUsingEncoding:enc]);    printf("Password:%s\n", (char*)[deviceInfo.chPassWord UTF8String]);        // login on failed    if (m_lUserID == -1)    {        [FrameBaseRequest showMessage:@"获取视频出错"];        [self backAction];        /*        UIAlertView *alert = [[UIAlertView alloc]                              initWithTitle:kWarningTitle                              message:kLoginDeviceFailMsg                              delegate:nil                              cancelButtonTitle:kWarningConfirmButton                              otherButtonTitles:nil];        [alert show];        [alert release];        */        return false;    }        if(logindeviceInfo.byChanNum > 0)    {        g_iStartChan = logindeviceInfo.byStartChan;        g_iPreviewChanNum = logindeviceInfo.byChanNum;    }    else if(logindeviceInfo.byIPChanNum > 0)    {        g_iStartChan = logindeviceInfo.byStartDChan;        g_iPreviewChanNum = logindeviceInfo.byIPChanNum + logindeviceInfo.byHighDChanNum * 256;    }    NSLog(@"g_iStartChan  %d::%d",g_iStartChan,_channelId);    g_iStartChan = 32+ _channelId;    return true;}// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.- (void)viewDidLoad {    [super viewDidLoad];        m_lUserID = -1;    m_lRealPlayID = -1;    m_lPlaybackID = -1;    [self playNow];            m_multiView = [[UIView alloc] initWithFrame:CGRectMake(0,0, m_playView.frame.size.width, m_playView.frame.size.height)];    m_multiView.backgroundColor = [UIColor clearColor];    [m_playView addSubview:m_multiView];        g_pController = self;    [self backBtn];}- (void)didReceiveMemoryWarning {    // Releases the view if it doesn't have a superview.    [super didReceiveMemoryWarning];        // Release any cached data, images, etc that aren't in use.}- (void)viewDidUnload {    if (m_lRealPlayID != -1)    {        NET_DVR_StopRealPlay(m_lRealPlayID);        m_lRealPlayID = -1;    }        if(m_lPlaybackID != -1)    {        NET_DVR_StopPlayBack(m_lPlaybackID);        m_lPlaybackID = -1;    }        if(m_lUserID != -1)    {        NET_DVR_Logout(m_lUserID);        NET_DVR_Cleanup();        m_lUserID = -1;    }//  [test drain];}- (void)dealloc {    if (m_playView != nil)    {        [m_playView release];        m_playView = nil;    }        [super dealloc];}-(void)backBtn{    UIButton *leftButon = [UIButton buttonWithType:UIButtonTypeRoundedRect];    leftButon.frame = CGRectMake(0,0,FrameWidth(40),FrameWidth(40));    [leftButon setImage:[UIImage imageNamed:@"back_icon"] forState:UIControlStateNormal];    [leftButon setContentEdgeInsets:UIEdgeInsetsMake(0, - FrameWidth(17), 0, FrameWidth(17))];    //button.alignmentRectInsetsOverride = UIEdgeInsetsMake(0, offset, 0, -(offset));    [leftButon addTarget:self action:@selector(backAction) forControlEvents:UIControlEventTouchUpInside];    UIBarButtonItem *fixedButton = [[UIBarButtonItem alloc]initWithCustomView:leftButon];    self.navigationItem.leftBarButtonItem = fixedButton;    self.navigationController.navigationBar.tintColor = [UIColor whiteColor];}-(void)backAction {    [self.navigationController popViewControllerAnimated:YES];}@end