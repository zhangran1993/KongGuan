////  SimpleDemoViewController.m//  SimpleDemo////  Created by apple on 11-4-2.//  Copyright __MyCompanyName__ 2011. All rights reserved.//#import "SimpleDemoViewController.h"#import "hcnetsdk.h"#import "HikDec.h"#import "Preview.h"#import "EzvizTrans.h"#import "FrameBaseRequest.h"@implementation SimpleDemoViewController@synthesize m_playView;@synthesize m_lUserID;@synthesize m_lRealPlayID;@synthesize m_lPlaybackID;@synthesize m_bPreview;SimpleDemoViewController *g_pController = NULL;int g_iStartChan = 0;int g_iPreviewChanNum = 0;void g_fExceptionCallBack(DWORD dwType, LONG lUserID, LONG lHandle, void *pUser){    NSLog(@"g_fExceptionCallBack Type[0x%x], UserID[%d], Handle[%d]", dwType, lUserID, lHandle);}BOOL NET_DVR_PTZControl(                        LONG     lRealHandle,                        DWORD    dwPTZCommand,                        DWORD    dwStop                        );BOOL NET_DVR_PTZControlWithSpeed(                                 LONG     lRealHandle,                                 DWORD    dwPTZCommand,                                 DWORD    dwStop,                                 DWORD    dwSpeed                                 );-(void)playNow{    NSLog(@"loginBtnClicked");        BOOL bRet = NET_DVR_Init();    if (!bRet){        NSLog(@"NET_DVR_Init failed");    }        NSString *documentPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];    const char* pDir = [documentPath UTF8String];    NET_DVR_SetLogToFile(3, (char*)pDir, true);    g_iStartChan = 32 + _channelId;    if([self loginNormalDevice]){        m_lRealPlayID = startPreview(m_lUserID, g_iStartChan, m_playView, 0);        if(m_lRealPlayID >= 0)        {            m_bPreview = true;        }    }}-(void)viewWillAppear:(BOOL)animated{    NSLog(@"StationDetailController viewWillAppear");    [UIApplication sharedApplication].statusBarStyle = UIStatusBarStyleDefault;    [self.navigationController setNavigationBarHidden:NO];  }-(void)viewWillDisappear:(BOOL)animated{    NSLog(@"StationDetailController viewWillDisappear");    [self.navigationController setNavigationBarHidden:YES];    }//创建导航栏视图-  (void)createNaviTopView {    UIButton *leftButon = [UIButton buttonWithType:UIButtonTypeRoundedRect];    leftButon.frame = CGRectMake(0,0,FrameWidth(60),FrameWidth(60));    [leftButon setImage:[UIImage imageNamed:@"back_black"] forState:UIControlStateNormal];    [leftButon setContentEdgeInsets:UIEdgeInsetsMake(0, - FrameWidth(20), 0, FrameWidth(20))];    //button.alignmentRectInsetsOverride = UIEdgeInsetsMake(0, offset, 0, -(offset));    [leftButon addTarget:self action:@selector(backAction) forControlEvents:UIControlEventTouchUpInside];    UIBarButtonItem *fixedButton = [[UIBarButtonItem alloc]initWithCustomView:leftButon];    self.navigationItem.leftBarButtonItem = fixedButton;            self.navigationController.navigationBar.tintColor = [UIColor blackColor];    self.title = [NSString stringWithFormat:@"台站任务提醒"];    [self.navigationController.navigationBar setTitleTextAttributes:@{NSFontAttributeName:FontSize(18),NSForegroundColorAttributeName:[UIColor colorWithHexString:@"#24252A"]}] ;        [self.navigationController.navigationBar setBackgroundImage:[self createImageWithColor:[UIColor whiteColor]] forBarMetrics:UIBarMetricsDefault];        self.navigationController.navigationBar.translucent = NO;        //去掉透明后导航栏下边的黑边    [self.navigationController.navigationBar setShadowImage:[[UIImage alloc] init]];}- (UIImage*)createImageWithColor: (UIColor*) color{    CGRect rect=CGRectMake(0.0f, 0.0f, 1.0f, 1.0f);    UIGraphicsBeginImageContext(rect.size);    CGContextRef context = UIGraphicsGetCurrentContext();    CGContextSetFillColorWithColor(context, [color CGColor]);    CGContextFillRect(context, rect);    UIImage *theImage = UIGraphicsGetImageFromCurrentImageContext();    UIGraphicsEndImageContext();    return theImage;}-(void)backAction {    [self.navigationController popViewControllerAnimated:YES];}- (bool) loginNormalDevice{        //  Get value    NSString * iP = _ip;//@"192.168.0.178";    NSString * port = _port;//@"8000";    NSString * usrName =  _name;//@"admin";    NSString * password = _password;//@"kg123456";        DeviceInfo *deviceInfo = [[DeviceInfo alloc] init];    deviceInfo.chDeviceAddr = iP;    deviceInfo.nDevicePort = (int)[port intValue];    deviceInfo.chLoginName = usrName;    deviceInfo.chPassWord = password;        // device login    NET_DVR_DEVICEINFO_V30 logindeviceInfo = {0};        // encode type    NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);    m_lUserID = NET_DVR_Login_V30((char*)[deviceInfo.chDeviceAddr UTF8String],                                  deviceInfo.nDevicePort,                                  (char*)[deviceInfo.chLoginName cStringUsingEncoding:enc],                                  (char*)[deviceInfo.chPassWord UTF8String],                                  &logindeviceInfo);        printf("iP:%s\n", (char*)[deviceInfo.chDeviceAddr UTF8String]);    printf("Port:%d\n", deviceInfo.nDevicePort);    printf("UsrName:%s\n", (char*)[deviceInfo.chLoginName cStringUsingEncoding:enc]);    printf("Password:%s\n", (char*)[deviceInfo.chPassWord UTF8String]);        // login on failed    if (m_lUserID == -1)    {        [FrameBaseRequest showMessage:@"获取视频出错"];        [self backAction];        /*         UIAlertView *alert = [[UIAlertView alloc]         initWithTitle:kWarningTitle         message:kLoginDeviceFailMsg         delegate:nil         cancelButtonTitle:kWarningConfirmButton         otherButtonTitles:nil];         [alert show];         [alert release];         */        return false;    }        if(logindeviceInfo.byChanNum > 0)    {        g_iStartChan = logindeviceInfo.byStartChan;        g_iPreviewChanNum = logindeviceInfo.byChanNum;    }    else if(logindeviceInfo.byIPChanNum > 0)    {        g_iStartChan = logindeviceInfo.byStartDChan;        g_iPreviewChanNum = logindeviceInfo.byIPChanNum + logindeviceInfo.byHighDChanNum * 256;    }    NSLog(@"g_iStartChan  %d::%d",g_iStartChan,_channelId);    g_iStartChan = 32+ _channelId;    return true;}// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.- (void)viewDidLoad {    [super viewDidLoad];    [self createNaviTopView];    self.title = _titleString;    m_lUserID = -1;    m_lRealPlayID = -1;    m_lPlaybackID = -1;    [self playNow];            m_multiView = [[UIView alloc] initWithFrame:CGRectMake(0,0, m_playView.frame.size.width, m_playView.frame.size.height)];    m_multiView.backgroundColor = [UIColor clearColor];    [m_playView addSubview:m_multiView];        self.view.backgroundColor = [UIColor blackColor];    UIView *bottomView = [[UIView alloc]init];    [self.view addSubview:bottomView];    bottomView.backgroundColor = [UIColor colorWithHexString:@"#E7E7E7"];    //    bottomView.hidden = YES;    [bottomView mas_makeConstraints:^(MASConstraintMaker *make) {        make.height.equalTo(@248);        make.left.equalTo(self.view.mas_left);        make.right.equalTo(self.view.mas_right);        make.width.equalTo(@(WIDTH_SCREEN));        make.bottom.equalTo(self.view.mas_bottom);    }];        UIImageView *centerBgImage = [[UIImageView alloc]init];    [bottomView addSubview:centerBgImage];    centerBgImage.image = [UIImage imageNamed:@"change_bgimage"];    [centerBgImage mas_makeConstraints:^(MASConstraintMaker *make) {        make.centerX.equalTo(bottomView.mas_centerX);        make.top.equalTo(bottomView.mas_top).offset(22);        make.width.height.equalTo(@197);    }];        UIImage *leftImage = [UIImage imageNamed:@"change_left"];               UIButton *leftBtn =  [[UIButton alloc]init];    [bottomView addSubview:leftBtn];    [leftBtn setImage:leftImage forState:UIControlStateNormal];    [leftBtn addTarget:self action:@selector(leftClicked:) forControlEvents:UIControlEventTouchDown];     [leftBtn mas_makeConstraints:^(MASConstraintMaker *make) {        make.left.equalTo(centerBgImage.mas_left).offset(43);        make.top.equalTo(centerBgImage.mas_top).offset(87);        make.width.height.equalTo(@22);    }];    leftBtn.adjustsImageWhenHighlighted = NO;            UIButton *topBtn =  [[UIButton alloc]init];    topBtn.adjustsImageWhenHighlighted = NO;    [bottomView addSubview:topBtn];    [topBtn setImage:[UIImage imageNamed:@"change_up"] forState:UIControlStateNormal];    [topBtn addTarget:self action:@selector(topMethod:) forControlEvents:UIControlEventTouchUpInside];    [topBtn mas_makeConstraints:^(MASConstraintMaker *make) {        make.centerX.equalTo(centerBgImage.mas_centerX);        make.top.equalTo(centerBgImage.mas_top).offset(43);        make.width.height.equalTo(@22);    }];    UIImage *rightImage = [UIImage imageNamed:@"change_right"];              UIButton *rightBtn =  [[UIButton alloc]init];    rightBtn.adjustsImageWhenHighlighted = NO;    [bottomView addSubview:rightBtn];    [rightBtn setImage:rightImage forState:UIControlStateNormal];    [rightBtn addTarget:self action:@selector(rightMethod:) forControlEvents:UIControlEventTouchUpInside];    [rightBtn mas_makeConstraints:^(MASConstraintMaker *make) {        make.top.equalTo(centerBgImage.mas_top).offset(87);        make.right.equalTo(centerBgImage.mas_right).offset(-43);        make.width.height.equalTo(@22);    }];        UIImage *bottomImage = [UIImage imageNamed:@"change_down"];       UIButton *bottomBtn =  [[UIButton alloc]init];    bottomBtn.adjustsImageWhenHighlighted = NO;    [bottomView addSubview:bottomBtn];    [bottomBtn setImage:bottomImage forState:UIControlStateNormal];    [bottomBtn addTarget:self action:@selector(bottomMethod:) forControlEvents:UIControlEventTouchUpInside];    [bottomBtn mas_makeConstraints:^(MASConstraintMaker *make) {        make.centerX.equalTo(centerBgImage.mas_centerX);        make.bottom.equalTo(centerBgImage.mas_bottom).offset(-42);        make.width.height.equalTo(@22);    }];        UIButton *refreshBtn = [[UIButton alloc]init];    [self.view addSubview:refreshBtn];    [refreshBtn addTarget:self action:@selector(minusMethod:) forControlEvents:UIControlEventTouchUpInside];    [refreshBtn setImage:[UIImage imageNamed:@"reset"] forState:UIControlStateNormal];    [refreshBtn mas_makeConstraints:^(MASConstraintMaker *make) {        make.width.height.equalTo(@23);        make.left.equalTo(self.view.mas_left).offset(57);        make.bottom.equalTo(bottomView.mas_top).offset(-27);    }];        UILabel *resetLabel = [[UILabel alloc]init];    [self.view addSubview:resetLabel];    resetLabel.text = @"重置";    resetLabel.textColor = [UIColor colorWithHexString:@"#FFFFFF"];    resetLabel.font = [UIFont systemFontOfSize:10];    resetLabel.numberOfLines = 1;    resetLabel.textAlignment = NSTextAlignmentCenter;    [resetLabel mas_makeConstraints:^(MASConstraintMaker *make) {        make.width.equalTo(@30);        make.height.equalTo(@14);        make.centerX.equalTo(refreshBtn.mas_centerX);        make.bottom.equalTo(bottomView.mas_top).offset(-9);    }];            UIButton *addBtn = [[UIButton alloc]init];    [self.view addSubview:addBtn];    [addBtn addTarget:self action:@selector(addmMethod:) forControlEvents:UIControlEventTouchUpInside];    [addBtn setImage:[UIImage imageNamed:@"change_add"] forState:UIControlStateNormal];    [addBtn mas_makeConstraints:^(MASConstraintMaker *make) {        make.width.height.equalTo(@23);        make.centerX.equalTo(self.view.mas_centerX);        make.bottom.equalTo(bottomView.mas_top).offset(-27);    }];    UILabel *addLabel = [[UILabel alloc]init];    [self.view addSubview:addLabel];    addLabel.text = @"放大";    addLabel.textColor = [UIColor colorWithHexString:@"#FFFFFF"];    addLabel.font = [UIFont systemFontOfSize:10];    addLabel.numberOfLines = 1;    addLabel.textAlignment = NSTextAlignmentCenter;    [addLabel mas_makeConstraints:^(MASConstraintMaker *make) {        make.width.equalTo(@30);        make.height.equalTo(@14);        make.centerX.equalTo(addBtn.mas_centerX);        make.bottom.equalTo(bottomView.mas_top).offset(-9);    }];               UIButton *minusBtn = [[UIButton alloc]init];    [self.view addSubview:minusBtn];    [minusBtn setImage:[UIImage imageNamed:@"change_minus"] forState:UIControlStateNormal];    [minusBtn addTarget:self action:@selector(minusMethod:) forControlEvents:UIControlEventTouchUpInside];    [minusBtn mas_makeConstraints:^(MASConstraintMaker *make) {        make.width.height.equalTo(@23);        make.right.equalTo(self.view.mas_right).offset(-57);        make.bottom.equalTo(bottomView.mas_top).offset(-27);    }];    UILabel *minusLabel = [[UILabel alloc]init];    [self.view addSubview:minusLabel];    minusLabel.text = @"缩小";    minusLabel.textColor = [UIColor colorWithHexString:@"#FFFFFF"];    minusLabel.font = [UIFont systemFontOfSize:10];    minusLabel.numberOfLines = 1;    minusLabel.textAlignment = NSTextAlignmentLeft;    [minusLabel mas_makeConstraints:^(MASConstraintMaker *make) {        make.width.equalTo(@30);        make.height.equalTo(@14);        make.centerX.equalTo(minusBtn.mas_centerX);        make.bottom.equalTo(bottomView.mas_top).offset(-9);    }];    g_pController = self;  }//left- (void)leftClicked:(UIButton *)button {        NET_DVR_PTZControl(0,PAN_LEFT,0);    [self performSelector:@selector(endLeft) withObject:nil afterDelay:.5f];    }- (void)endLeft {    NET_DVR_PTZControl(0,PAN_LEFT,1);}//right- (void)rightMethod:(UIButton *)button {    NSLog(@"right");    NET_DVR_PTZControl(0,PAN_RIGHT,0);    [self performSelector:@selector(endRight) withObject:nil afterDelay:.5f];}- (void)endRight {    NET_DVR_PTZControl(0,PAN_RIGHT,1);    NSLog(@"NET_DVR_RealPlay_V40 failed:%d",  NET_DVR_GetLastError());    int errorNum =NET_DVR_GetLastError();    if(errorNum != 0 ) {        [FrameBaseRequest showMessage:@"暂无权限"];    }}//top- (void)topMethod:(UIButton *)button {    NSLog(@"top");    NET_DVR_PTZControl(0,TILT_UP,0);    [self performSelector:@selector(endTop) withObject:nil afterDelay:.5f];}- (void)endTop {    NET_DVR_PTZControl(0,TILT_UP,1);    int errorNum =NET_DVR_GetLastError();    if(errorNum != 0 ) {        [FrameBaseRequest showMessage:@"暂无权限"];    }}//bottom- (void)bottomMethod:(UIButton *)button {    NSLog(@"bottom");    NET_DVR_PTZControl(0,TILT_DOWN,0);    [self performSelector:@selector(endBottom) withObject:nil afterDelay:.5f];}- (void)endBottom {    NET_DVR_PTZControl(0,TILT_DOWN,1);    int errorNum =NET_DVR_GetLastError();    if(errorNum != 0 ) {        [FrameBaseRequest showMessage:@"暂无权限"];    }}//zoomout- (void)minusMethod:(UIButton *)button {    NSLog(@"minus");    NET_DVR_PTZControl(0,ZOOM_OUT,0);    [self performSelector:@selector(endZoomOut) withObject:nil afterDelay:.5f];}- (void)endZoomOut {    NET_DVR_PTZControl(0,ZOOM_OUT,1);    int errorNum =NET_DVR_GetLastError();    if(errorNum != 0 ) {        [FrameBaseRequest showMessage:@"暂无权限"];    }}//zoomin- (void)addmMethod:(UIButton *)button {    NSLog(@"add");    NET_DVR_PTZControl(0,ZOOM_IN,0);    [self performSelector:@selector(endZoomIn) withObject:nil afterDelay:.5f];}- (void)endZoomIn {    NET_DVR_PTZControl(0,ZOOM_IN,1);    int errorNum =NET_DVR_GetLastError();    if(errorNum != 0 ) {        [FrameBaseRequest showMessage:@"暂无权限"];    }}- (void)didReceiveMemoryWarning {    // Releases the view if it doesn't have a superview.    [super didReceiveMemoryWarning];        // Release any cached data, images, etc that aren't in use.}- (void)viewDidUnload {    if (m_lRealPlayID != -1)    {        NET_DVR_StopRealPlay(m_lRealPlayID);        m_lRealPlayID = -1;    }        if(m_lPlaybackID != -1)    {        NET_DVR_StopPlayBack(m_lPlaybackID);        m_lPlaybackID = -1;    }        if(m_lUserID != -1)    {        NET_DVR_Logout(m_lUserID);        NET_DVR_Cleanup();        m_lUserID = -1;    }    //  [test drain];}- (void)dealloc {    if (m_playView != nil)    {        [m_playView release];        m_playView = nil;    }        [super dealloc];}@end